import random
import string
import sqlite3
import logging
import requests
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOOSTY_URL = os.getenv('BOOSTY_URL')  # –°—Å—ã–ª–∫–∞ –Ω–∞ Boosty

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
messages = {
    "ru": {
        "welcome": "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
        "get_code": "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        "code_success": "üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –æ—Ç–∫—Ä—ã—Ç.",
        "code_fail": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
        "scenario": "üìñ –í–æ—Ç –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
        "no_events": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
        "choose_city": "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        "city_selected": "–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {}",
        "choose_time": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):",
        "time_selected": "–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {}",
        "choose_mood": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
        "mood_selected": "–í—ã–±—Ä–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {}",
        "choose_group_size": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
        "group_size_selected": "–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {}",
        "settings": "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\nüìç –ì–æ—Ä–æ–¥: {}\n‚è∞ –í—Ä–µ–º—è: {}\nüé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {}\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {}",
        "scenario_generated": "üìÖ –í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π:\n\n{}"
    },
    "en": {
        "welcome": "üí´ Welcome!",
        "subscribe": "Subscribe",
        "get_code": "Get code",
        "code_prompt": "Enter access code:",
        "code_success": "üéâ Code confirmed! Access to scenarios granted.",
        "code_fail": "‚ùå Invalid code or code already used.",
        "scenario": "üìñ Here is your scenario: ...",
        "not_subscribed": "‚ùå You don't have access to scenarios. Please subscribe.",
        "no_events": "‚ùå No events available.",
        "choose_city": "Enter city:",
        "city_selected": "Selected city: {}",
        "choose_time": "Enter time (e.g., 18:00):",
        "time_selected": "Selected time: {}",
        "choose_mood": "Choose mood:",
        "mood_selected": "Selected mood: {}",
        "choose_group_size": "Enter number of people:",
        "group_size_selected": "Selected number of people: {}",
        "settings": "‚öôÔ∏è Your settings:\nüìç City: {}\n‚è∞ Time: {}\nüé≠ Mood: {}\nüë• Number of people: {}",
        "scenario_generated": "üìÖ Your scenario:\n\n{}"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            code TEXT,
            is_subscribed INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            city TEXT DEFAULT '–ü–æ–ª—å—à–∞',
            time TEXT DEFAULT '18:00',
            mood TEXT DEFAULT '–í–µ—Å–µ–ª—å–µ',
            group_size INTEGER DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('INSERT OR IGNORE INTO user_settings (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_code(user_id, code):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET code = ? WHERE user_id = ?', (code, user_id))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_subscription(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_subscribed FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT city, time, mood, group_size FROM user_settings WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {
            "city": result[0],
            "time": result[1],
            "mood": result[2],
            "group_size": result[3]
        }
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_settings(user_id, key, value):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(f'UPDATE user_settings SET {key} = ? WHERE user_id = ?', (value, user_id))
    conn.commit()
    conn.close()

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ñ–∏—à
def parse_events(city="–ü–æ–ª—å—à–∞"):
    url = f"https://example.com/afisha/{city}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    events = []
    for event in soup.find_all('div', class_='event'):  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        title = event.find('h2').text.strip()
        date = event.find('span', class_='date').text.strip()
        location = event.find('span', class_='location').text.strip()
        events.append({
            "title": title,
            "date": date,
            "location": location
        })
    return events

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
def generate_scenario(events, user_settings):
    city = user_settings.get("city", "–ü–æ–ª—å—à–∞")
    time = user_settings.get("time", "18:00")
    mood = user_settings.get("mood", "–í–µ—Å–µ–ª—å–µ")
    group_size = user_settings.get("group_size", 1)

    scenario = (
        f"üìÖ –í–∞—à –ø–ª–∞–Ω –Ω–∞ {time} –≤ {city}:\n\n"
        f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {group_size}\n\n"
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
    )

    for event in events:
        scenario += f"üé≠ {event['title']}\n"
        scenario += f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
        scenario += f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n\n"

    return scenario

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    add_user(update.effective_user.id)

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton(messages[user_language]["get_code"])],
        [KeyboardButton(messages[user_language]["subscribe"])]
    ], resize_keyboard=True)

    await update.message.reply_text(messages[user_language]["welcome"], reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /set_city
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    city = ' '.join(context.args)

    update_user_settings(user_id, "city", city)
    await update.message.reply_text(messages[user_language]["city_selected"].format(city))

# –ö–æ–º–∞–Ω–¥–∞ /set_time
async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    time = ' '.join(context.args)

    update_user_settings(user_id, "time", time)
    await update.message.reply_text(messages[user_language]["time_selected"].format(time))

# –ö–æ–º–∞–Ω–¥–∞ /set_mood
async def set_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    mood = ' '.join(context.args)

    update_user_settings(user_id, "mood", mood)
    await update.message.reply_text(messages[user_language]["mood_selected"].format(mood))

# –ö–æ–º–∞–Ω–¥–∞ /set_group_size
async def set_group_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    group_size = ' '.join(context.args)

    update_user_settings(user_id, "group_size", group_size)
    await update.message.reply_text(messages[user_language]["group_size_selected"].format(group_size))

# –ö–æ–º–∞–Ω–¥–∞ /settings
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    settings = get_user_settings(user_id)
    if settings:
        settings_text = messages[user_language]["settings"].format(
            settings["city"], settings["time"], settings["mood"], settings["group_size"]
        )
    else:
        settings_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

    await update.message.reply_text(settings_text)

# –ö–æ–º–∞–Ω–¥–∞ /scenario
async def scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    if not check_subscription(user_id):
        await update.message.reply_text(messages[user_language]["not_subscribed"])
        return

    settings = get_user_settings(user_id)
    if not settings:
        await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    events = parse_events(settings["city"])
    if not events:
        await update.message.reply_text(messages[user_language]["no_events"])
        return

    scenario_text = generate_scenario(events, settings)
    await update.message.reply_text(messages[user_language]["scenario_generated"].format(scenario_text))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_city", set_city))
    application.add_handler(CommandHandler("set_time", set_time))
    application.add_handler(CommandHandler("set_mood", set_mood))
    application.add_handler(CommandHandler("set_group_size", set_group_size))
    application.add_handler(CommandHandler("settings", settings))
    application.add_handler(CommandHandler("scenario", scenario))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
