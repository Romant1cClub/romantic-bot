import random
import string
import sqlite3
import logging
import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOOSTY_URL = os.getenv('BOOSTY_URL')  # –°—Å—ã–ª–∫–∞ –Ω–∞ Boosty

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
messages = {
    "ru": {
        "welcome": "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
        "get_code": "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        "code_success": "üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –æ—Ç–∫—Ä—ã—Ç.",
        "code_fail": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
        "scenario": "üìñ –í–æ—Ç –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
        "no_events": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    },
    "en": {
        "welcome": "üí´ Welcome!",
        "subscribe": "Subscribe",
        "get_code": "Get code",
        "code_prompt": "Enter access code:",
        "code_success": "üéâ Code confirmed! Access to scenarios granted.",
        "code_fail": "‚ùå Invalid code or code already used.",
        "scenario": "üìñ Here is your scenario: ...",
        "not_subscribed": "‚ùå You don't have access to scenarios. Please subscribe.",
        "no_events": "‚ùå No events available."
    },
    "uk": {
        "welcome": "üí´ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
        "get_code": "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É:",
        "code_success": "üéâ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –î–æ—Å—Ç—É–ø –¥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤—ñ–¥–∫—Ä–∏—Ç–æ.",
        "code_fail": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–±–æ –∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ.",
        "scenario": "üìñ –û—Å—å –≤–∞—à —Å—Ü–µ–Ω–∞—Ä—ñ–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.",
        "no_events": "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤."
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            code TEXT,
            is_subscribed INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_code(user_id, code):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET code = ? WHERE user_id = ?', (code, user_id))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_subscription(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_subscribed FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(update: Update):
    lang = update.effective_user.language_code
    return lang if lang in messages else "en"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ñ–∏—à
def parse_events(city="–ú–æ—Å–∫–≤–∞"):
    url = f"https://example.com/afisha/{city}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    events = []
    for event in soup.find_all('div', class_='event'):  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        title = event.find('h2').text.strip()
        date = event.find('span', class_='date').text.strip()
        location = event.find('span', class_='location').text.strip()
        events.append({
            "title": title,
            "date": date,
            "location": location
        })
    return events

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
def generate_scenario(events):
    scenario = "üìÖ –í–∞—à –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å:\n\n"
    for event in events:
        scenario += f"üé≠ {event['title']}\n"
        scenario += f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
        scenario += f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n\n"
    return scenario

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    add_user(update.effective_user.id)

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton(messages[user_language]["get_code"])],
        [KeyboardButton(messages[user_language]["subscribe"])]
    ], resize_keyboard=True)

    await update.message.reply_text(messages[user_language]["welcome"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    if not check_subscription(user_id):
        await update.message.reply_text(messages[user_language]["not_subscribed"])
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT code FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0]:
        await update.message.reply_text(f"üìå –í–∞—à –∫–æ–¥ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result[0]}")
    else:
        new_code = generate_code()
        update_code(user_id, new_code)
        await update.message.reply_text(f"‚úÖ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {new_code}\n\n{messages[user_language]['code_prompt']}")

# –ö–æ–º–∞–Ω–¥–∞ /scenario
async def scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    if not check_subscription(user_id):
        await update.message.reply_text(messages[user_language]["not_subscribed"])
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ñ–∏—à–∏
    events = parse_events(city="–ú–æ—Å–∫–≤–∞")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞

    if not events:
        await update.message.reply_text(messages[user_language]["no_events"])
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario_text = generate_scenario(events)
    await update.message.reply_text(scenario_text)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥|Get code|–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥"), button_handler))
    application.add_handler(CommandHandler("scenario", scenario))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
