import random
import string
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
TOKEN = '8179789266:AAFiXJ-B-32F2GfZxOghM8qiHOtnRXXE5Sc'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOOSTY_URL = 'https://boosty.to/romant1cclub_bot/purchase/3245989?ssource=DIRECT&share=subscription_link'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É Boosty

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_codes = {}  # {user_id: –∫–æ–¥}
subscribed_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º, "
        f"–æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: {BOOSTY_URL}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /getcode"
    )

# –ö–æ–º–∞–Ω–¥–∞ /getcode
async def get_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in subscribed_users:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    if user_id in user_codes:
        await update.message.reply_text(f"üìå –í–∞—à –∫–æ–¥ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {user_codes[user_id]}")
    else:
        new_code = generate_code()
        user_codes[user_id] = new_code
        await update.message.reply_text(
            f"‚úÖ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {new_code}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /code <–í–ê–®_–ö–û–î>"
        )

# –ö–æ–º–∞–Ω–¥–∞ /code
async def check_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_code = ' '.join(context.args)

    if user_id in user_codes and user_codes[user_id] == user_code:
        await update.message.reply_text(
            "üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –æ—Ç–∫—Ä—ã—Ç. –í–≤–µ–¥–∏—Ç–µ /scenario, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        del user_codes[user_id]
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /scenario
async def scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in subscribed_users:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    # –ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
    await update.message.reply_text("üìñ –í–æ—Ç –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: ...")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getcode", get_code))
    application.add_handler(CommandHandler("code", check_code))
    application.add_handler(CommandHandler("scenario", scenario))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
