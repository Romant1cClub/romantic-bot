import random
import string
import sqlite3
import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOOSTY_URL = os.getenv('BOOSTY_URL')  # –°—Å—ã–ª–∫–∞ –Ω–∞ Boosty

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
messages = {
    "ru": {
        "welcome": "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
        "get_code": "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        "code_success": "üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –æ—Ç–∫—Ä—ã—Ç.",
        "code_fail": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
        "scenario": "üìñ –í–æ—Ç –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
        "no_events": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
        "choose_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        "city_selected": "–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {}",
        "settings": "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\nüìç –õ–æ–∫–∞—Ü–∏—è: {}\n‚è∞ –í—Ä–µ–º—è: {}\nüë• –° –∫–µ–º: {}\nüé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {}\nüìù –ù—é–∞–Ω—Å—ã: {}",
        "location_updated": "üìç –õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {}",
        "time_updated": "‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {}",
        "company_updated": "üë• –ö–æ–º–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {}",
        "mood_updated": "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {}",
        "notes_updated": "üìù –ù—é–∞–Ω—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞: {}"
    },
    "en": {
        "welcome": "üí´ Welcome!",
        "subscribe": "Subscribe",
        "get_code": "Get code",
        "code_prompt": "Enter access code:",
        "code_success": "üéâ Code confirmed! Access to scenarios granted.",
        "code_fail": "‚ùå Invalid code or code already used.",
        "scenario": "üìñ Here is your scenario: ...",
        "not_subscribed": "‚ùå You don't have access to scenarios. Please subscribe.",
        "no_events": "‚ùå No events available.",
        "choose_city": "Choose city:",
        "city_selected": "Selected city: {}",
        "settings": "‚öôÔ∏è Your settings:\nüìç Location: {}\n‚è∞ Time: {}\nüë• Company: {}\nüé≠ Mood: {}\nüìù Notes: {}",
        "location_updated": "üìç Location updated to: {}",
        "time_updated": "‚è∞ Time updated to: {}",
        "company_updated": "üë• Company updated to: {}",
        "mood_updated": "üé≠ Mood updated to: {}",
        "notes_updated": "üìù Notes updated to: {}"
    },
    "uk": {
        "welcome": "üí´ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
        "get_code": "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É:",
        "code_success": "üéâ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –î–æ—Å—Ç—É–ø –¥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤—ñ–¥–∫—Ä–∏—Ç–æ.",
        "code_fail": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–±–æ –∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ.",
        "scenario": "üìñ –û—Å—å –≤–∞—à —Å—Ü–µ–Ω–∞—Ä—ñ–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.",
        "no_events": "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤.",
        "choose_city": "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        "city_selected": "–û–±—Ä–∞–Ω–µ –º—ñ—Å—Ç–æ: {}",
        "settings": "‚öôÔ∏è –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\nüìç –õ–æ–∫–∞—Ü—ñ—è: {}\n‚è∞ –ß–∞—Å: {}\nüë• –ó –∫–∏–º: {}\nüé≠ –ù–∞—Å—Ç—Ä—ñ–π: {}\nüìù –ù—é–∞–Ω—Å–∏: {}",
        "location_updated": "üìç –õ–æ–∫–∞—Ü—ñ—è –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {}",
        "time_updated": "‚è∞ –ß–∞—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {}",
        "company_updated": "üë• –ö–æ–º–ø–∞–Ω—ñ—è –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {}",
        "mood_updated": "üé≠ –ù–∞—Å—Ç—Ä—ñ–π –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {}",
        "notes_updated": "üìù –ù—é–∞–Ω—Å–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {}"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            code TEXT,
            is_subscribed INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            location TEXT DEFAULT '–ü–æ–ª—å—à–∞',
            time TEXT DEFAULT '–í–µ—á–µ—Ä',
            company TEXT DEFAULT '–î—Ä—É–∑—å—è',
            mood TEXT DEFAULT '–í–µ—Å–µ–ª—å–µ',
            notes TEXT DEFAULT '',
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('INSERT OR IGNORE INTO user_settings (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_code(user_id, code):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET code = ? WHERE user_id = ?', (code, user_id))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_subscription(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_subscribed FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(update: Update):
    lang = update.effective_user.language_code
    return lang if lang in messages else "en"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT location, time, company, mood, notes FROM user_settings WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {
            "location": result[0],
            "time": result[1],
            "company": result[2],
            "mood": result[3],
            "notes": result[4]
        }
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_settings(user_id, key, value):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(f'UPDATE user_settings SET {key} = ? WHERE user_id = ?', (value, user_id))
    conn.commit()
    conn.close()

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ñ–∏—à
def parse_events(city="–ü–æ–ª—å—à–∞"):
    url = f"https://example.com/afisha/{city}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    events = []
    for event in soup.find_all('div', class_='event'):  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        title = event.find('h2').text.strip()
        date = event.find('span', class_='date').text.strip()
        location = event.find('span', class_='location').text.strip()
        events.append({
            "title": title,
            "date": date,
            "location": location
        })
    return events

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
def generate_scenario(events, user_settings):
    location = user_settings.get("location", "–ü–æ–ª—å—à–∞")
    time = user_settings.get("time", "–í–µ—á–µ—Ä")
    company = user_settings.get("company", "–î—Ä—É–∑—å—è")
    mood = user_settings.get("mood", "–í–µ—Å–µ–ª—å–µ")
    notes = user_settings.get("notes", "")

    scenario = (
        f"üìÖ –í–∞—à –ø–ª–∞–Ω –Ω–∞ {time} –≤ {location}:\n\n"
        f"üë• –° –∫–µ–º: {company}\n"
        f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
        f"üìù –ù—é–∞–Ω—Å—ã: {notes}\n\n"
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
    )

    for event in events:
        scenario += f"üé≠ {event['title']}\n"
        scenario += f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
        scenario += f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n\n"

    return scenario

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    add_user(update.effective_user.id)

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton(messages[user_language]["get_code"])],
        [KeyboardButton(messages[user_language]["subscribe"])]
    ], resize_keyboard=True)

    await update.message.reply_text(messages[user_language]["welcome"], reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /settings
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    settings = get_user_settings(user_id)
    if settings:
        settings_text = messages[user_language]["settings"].format(
            settings["location"], settings["time"], settings["company"], settings["mood"], settings["notes"]
        )
    else:
        settings_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

    await update.message.reply_text(settings_text)

# –ö–æ–º–∞–Ω–¥–∞ /set_location
async def set_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    location = ' '.join(context.args)

    update_user_settings(user_id, "location", location)
    await update.message.reply_text(messages[user_language]["location_updated"].format(location))

# –ö–æ–º–∞–Ω–¥–∞ /set_time
async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    time = ' '.join(context.args)

    update_user_settings(user_id, "time", time)
    await update.message.reply_text(messages[user_language]["time_updated"].format(time))

# –ö–æ–º–∞–Ω–¥–∞ /set_company
async def set_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    company = ' '.join(context.args)

    update_user_settings(user_id, "company", company)
    await update.message.reply_text(messages[user_language]["company_updated"].format(company))

# –ö–æ–º–∞–Ω–¥–∞ /set_mood
async def set_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    mood = ' '.join(context.args)

    update_user_settings(user_id, "mood", mood)
    await update.message.reply_text(messages[user_language]["mood_updated"].format(mood))

# –ö–æ–º–∞–Ω–¥–∞ /set_notes
async def
