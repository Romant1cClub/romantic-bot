import random
import string
import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOOSTY_URL = os.getenv('BOOSTY_URL')  # –°—Å—ã–ª–∫–∞ –Ω–∞ Boosty

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
messages = {
    "ru": {
        "welcome": "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "subscribe": "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: {BOOSTY_URL}",
        "get_code": "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
        "code_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        "code_success": "üéâ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ—Å—Ç—É–ø –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º –æ—Ç–∫—Ä—ã—Ç.",
        "code_fail": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
        "scenario": "üìñ –í–æ—Ç –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: ...",
        "not_subscribed": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    },
    "en": {
        "welcome": "üí´ Welcome!",
        "subscribe": "Subscribe here: {BOOSTY_URL}",
        "get_code": "Get code",
        "code_prompt": "Enter access code:",
        "code_success": "üéâ Code confirmed! Access to scenarios granted.",
        "code_fail": "‚ùå Invalid code or code already used.",
        "scenario": "üìñ Here is your scenario: ...",
        "not_subscribed": "‚ùå You don't have access to scenarios. Please subscribe."
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_codes = {}  # {user_id: –∫–æ–¥}
subscribed_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            code TEXT,
            is_subscribed INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(update: Update):
    return update.effective_user.language_code or "en"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    keyboard = [
        [InlineKeyboardButton(messages[user_language]["get_code"], callback_data='get_code')],
        [InlineKeyboardButton(messages[user_language]["subscribe"], url=BOOSTY_URL)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(messages[user_language]["welcome"], reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_language = get_user_language(update)

    if user_id not in subscribed_users:
        await query.edit_message_text(messages[user_language]["not_subscribed"])
        return

    if user_id in user_codes:
        await query.edit_message_text(f"üìå –í–∞—à –∫–æ–¥ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {user_codes[user_id]}")
    else:
        new_code = generate_code()
        user_codes[user_id] = new_code
        await query.edit_message_text(
            f"‚úÖ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {new_code}\n\n"
            f"{messages[user_language]['code_prompt']}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /code
async def check_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)
    user_code = ' '.join(context.args)

    if user_id in user_codes and user_codes[user_id] == user_code:
        await update.message.reply_text(messages[user_language]["code_success"])
        del user_codes[user_id]
    else:
        await update.message.reply_text(messages[user_language]["code_fail"])

# –ö–æ–º–∞–Ω–¥–∞ /scenario
async def scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language = get_user_language(update)

    if user_id not in subscribed_users:
        await update.message.reply_text(messages[user_language]["not_subscribed"])
        return

    await update.message.reply_text(messages[user_language]["scenario"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    user_language = get_user_language(update)
    await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("code", check_code))
    application.add_handler(CommandHandler("scenario", scenario))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
