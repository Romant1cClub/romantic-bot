import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')  # –ö–ª—é—á OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
messages = {
    "ru": {
        "welcome": "üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ.",
        "ask_criteria": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n1. –í–∞—à –±—é–¥–∂–µ—Ç?\n2. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∏–Ω–æ, –ø—Ä–æ–≥—É–ª–∫–∞)?\n3. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?\n4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?",
        "generating_scenario": "üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...",
        "scenario_ready": "üéâ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤!",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    },
    "en": {
        "welcome": "üí´ Welcome! I'll help you organize the perfect date.",
        "ask_criteria": "Please answer a few questions:\n\n1. Your budget?\n2. Preferences (e.g., restaurant, cinema, walk)?\n3. Location?\n4. Any additional wishes?",
        "generating_scenario": "üõ† Generating scenario...",
        "scenario_ready": "üéâ Your unique scenario is ready!",
        "error": "‚ùå An error occurred. Please try again later."
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(update: Update):
    user_language = update.effective_user.language_code
    return user_language if user_language in messages else "en"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    await update.message.reply_text(messages[user_language]["welcome"])
    await update.message.reply_text(messages[user_language]["ask_criteria"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
async def handle_criteria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    user_input = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["criteria"] = user_input

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    async def handle_criteria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_language = get_user_language(update)
    user_input = update.message.text

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await update.message.reply_text(messages[user_language]["generating_scenario"])

    try:
        # –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        scenario = f"–í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:\n\n{user_input}\n\n–ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è:\n1. –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ.\n2. –ü–æ—Å–µ—Ç–∏—Ç–µ —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ.\n3. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–µ—á–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–∏–ª—å–º–∞."
        await update.message.reply_text(messages[user_language]["scenario_ready"])
        await update.message.reply_text(scenario)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(messages[user_language]["error"])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_criteria))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
